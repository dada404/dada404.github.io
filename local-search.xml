<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>初入Mongodb</title>
    <link href="/2022/06/05/5_%E6%9C%8D%E5%8A%A1%E7%9B%B8%E5%85%B3/1_Mongodb/%E5%88%9D%E5%85%A5Mongodb/"/>
    <url>/2022/06/05/5_%E6%9C%8D%E5%8A%A1%E7%9B%B8%E5%85%B3/1_Mongodb/%E5%88%9D%E5%85%A5Mongodb/</url>
    
    <content type="html"><![CDATA[<h1 id="C1-What-is-MongoDB"><a href="#C1-What-is-MongoDB" class="headerlink" title="C1.What is MongoDB"></a>C1.What is MongoDB</h1><p>MongoDB是一个<strong>NoSQL Document DataBase</strong></p><h2 id="Document和Collection"><a href="#Document和Collection" class="headerlink" title="Document和Collection"></a>Document和Collection</h2><ul><li>document指的是一组键值对</li><li>collection指的是一组document</li></ul><p>在一个collection中的document格式可以相同也可以不相同</p><p>一个collection中的document空了，那么这个collection也会消失。一个database的document空了，那么这个database也会消失</p><h1 id="C2-Importing-Exporting-and-Querying-Data"><a href="#C2-Importing-Exporting-and-Querying-Data" class="headerlink" title="C2.Importing, Exporting, and Querying Data"></a>C2.Importing, Exporting, and Querying Data</h1><h2 id="MongoDB怎么存储内容"><a href="#MongoDB怎么存储内容" class="headerlink" title="MongoDB怎么存储内容"></a>MongoDB怎么存储内容</h2><h3 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h3><h4 id="JSON格式"><a href="#JSON格式" class="headerlink" title="JSON格式"></a>JSON格式</h4><ul><li>解析慢</li><li>占用空间</li><li>支持的类型少</li><li>机器和人可读</li></ul><h4 id="BSON格式"><a href="#BSON格式" class="headerlink" title="BSON格式"></a>BSON格式</h4><p>以二进制的方式存储并为JSON格式</p><ul><li><p>机器可读</p></li><li><p>二进制形式</p></li><li><p>支持类型更多</p></li><li><p>解析速度更快，占用更少的空间</p></li></ul><h4 id="是哪个？"><a href="#是哪个？" class="headerlink" title="是哪个？"></a>是哪个？</h4><p>MongoDB以BSON做传输和储存，以JSON格式看待</p><h3 id="导入和导出"><a href="#导入和导出" class="headerlink" title="导入和导出"></a>导入和导出</h3><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">mongoimport --uri <span class="hljs-string">&quot;&quot;</span><br><br>mongoexport --uri <span class="hljs-string">&quot;&quot;</span><br>--collection=name<br>--out=name.json<br></code></pre></td></tr></table></figure><h4 id="BSON"><a href="#BSON" class="headerlink" title="BSON"></a>BSON</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">mongorestore --uri <span class="hljs-string">&quot;&quot;</span><br> --drop dump<br><br>mongodump--uri <span class="hljs-string">&quot;&quot;</span><br>--drop=filename.json          <br></code></pre></td></tr></table></figure><h3 id="query"><a href="#query" class="headerlink" title="query"></a>query</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">show dbs<br>use sample_training<br>show collections<br><span class="hljs-comment">#查询 但可能结果很多 一屏幕显示不完(使用&quot;lt&quot;显示下一页结果)</span><br>db.zips.find(&#123;<span class="hljs-string">&quot;state&quot;</span>: <span class="hljs-string">&quot;NY&quot;</span>&#125;)<br><span class="hljs-comment">#计数</span><br>db.zips.find(&#123;<span class="hljs-string">&quot;state&quot;</span>: <span class="hljs-string">&quot;NY&quot;</span>&#125;).count()<br><span class="hljs-comment">#美化显示</span><br>db.zips.find(&#123;<span class="hljs-string">&quot;state&quot;</span>: <span class="hljs-string">&quot;NY&quot;</span>, <span class="hljs-string">&quot;city&quot;</span>: <span class="hljs-string">&quot;ALBANY&quot;</span>&#125;).pretty()<br><span class="hljs-comment">#随机获取一个</span><br>db.inspections.findOne();<br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h1 id="C3-Creating-and-Manipulating-Documents"><a href="#C3-Creating-and-Manipulating-Documents" class="headerlink" title="C3.Creating and Manipulating Documents"></a>C3.Creating and Manipulating Documents</h1><h2 id="ObjectId"><a href="#ObjectId" class="headerlink" title="ObjectId"></a>ObjectId</h2><p>每一个document都默认有一个字段<code>_id</code>，类型为objectId。它是唯一的</p><h2 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">单插</span><br>db.inspections.insert(&#123;<br>...<br>&#125;);<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">顺序多插（遇到error即停止后续插入）</span><br>db.inspections.insert([&#123;&#125;,&#123;&#125;,&#123;&#125;])<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">无序多插（遇到error不停止，继续后续的插入）</span><br>db.inspections.insert([&#123;&#125;,&#123;&#125;,&#123;&#125;],&#123;&quot;ordered&quot;: false&#125;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">mongodb为了简化collection和document的插入</span><br>db.inspection.insert([&#123;&#125;]) #db中没有inspection<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">但是如果是use inspection是不会新如inspection库，因为没有插入数据</span><br>use inspection<br></code></pre></td></tr></table></figure><h2 id="update"><a href="#update" class="headerlink" title="update"></a>update</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#如果有多个匹配条件的话，只会随机对一个进行操作</span><br>updateOne(&#123;<span class="hljs-string">&quot;f1&quot;</span>:v1&#125;, operations)<br><span class="hljs-comment">#批量更新</span><br>updateMany(&#123;<span class="hljs-string">&quot;f1&quot;</span>:v1&#125;, “operations”)<br></code></pre></td></tr></table></figure><h3 id="operations"><a href="#operations" class="headerlink" title="operations"></a>operations</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>   &lt;operator1&gt;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> &lt;field1&gt;<span class="hljs-punctuation">:</span> &lt;value1&gt;<span class="hljs-punctuation">,</span> ... <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>   &lt;operator2&gt;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> &lt;field2&gt;<span class="hljs-punctuation">:</span> &lt;value2&gt;<span class="hljs-punctuation">,</span> ... <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>   ...<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>$inc</code>:增加</p><p><code>$set</code>:赋值（如果属性不在，则和push类似）</p><p><code>$push</code>:添加属性和往数组元素</p><p>更多见<a href="https://www.mongodb.com/docs/manual/reference/operator/update/">https://www.mongodb.com/docs/manual/reference/operator/update/</a></p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>将item为paper的size.uom和status进行修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.inventory.updateOne(<br>   &#123; item: <span class="hljs-string">&quot;paper&quot;</span> &#125;,<br>   &#123;<br>     <span class="hljs-variable">$set</span>: &#123; <span class="hljs-string">&quot;size.uom&quot;</span>: <span class="hljs-string">&quot;cm&quot;</span>, status: <span class="hljs-string">&quot;P&quot;</span> &#125;<br>   &#125;<br>)<br></code></pre></td></tr></table></figure><h2 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">deleteOne(&#123;&#125;)<br>deleteMany(&#123;&#125;)<br></code></pre></td></tr></table></figure><h2 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h2><p>删除一个collection</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">db</span>.collection_name.<span class="hljs-keyword">drop</span>()<br></code></pre></td></tr></table></figure><h1 id="C4-Advanced-CRUD-Operations"><a href="#C4-Advanced-CRUD-Operations" class="headerlink" title="C4.Advanced CRUD Operations"></a>C4.Advanced CRUD Operations</h1><h2 id="比较符"><a href="#比较符" class="headerlink" title="比较符"></a>比较符</h2><ul><li>(&gt;) 大于 - $gt</li><li>(&lt;) 小于 - $lt</li><li>(&gt;=) 大于等于 - $gte</li><li>(&lt;= ) 小于等于 - $lte</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs db">db.trips.find(&#123;&quot;tripduration&quot;:&#123;&quot;$lt&quot;:70, &quot;$gt&quot;:100&#125;, <br>&quot;usertype&quot;:&#123;&quot;$eq&quot;:&quot;Consumer&quot;&#125;&#125;)<br></code></pre></td></tr></table></figure><h2 id="逻辑符"><a href="#逻辑符" class="headerlink" title="逻辑符"></a>逻辑符</h2><ul><li>$and:都满足（默认的情况即是and的效果）</li><li>$or:其中一个满足</li><li>$nor:其中一个不满足</li><li>$not:都不满足</li></ul><p>前三个使用类似</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">&quot;<span class="hljs-tag">&lt;<span class="hljs-name">operator</span>&gt;</span>&quot;:[</span><span class="hljs-template-variable">&#123;condition1&#125;</span><span class="language-xml">,</span><span class="hljs-template-variable">&#123;condition2&#125;</span><span class="language-xml">]</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">db.routes().<span class="hljs-built_in">find</span>([&#123;<span class="hljs-string">&quot;<span class="hljs-variable">$or</span>&quot;</span>,[&#123;c1&#125;,&#123;c&#125;])<br></code></pre></td></tr></table></figure><p>not是对带修饰符的condtion语句的修饰</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">dp.routes().<span class="hljs-built_in">find</span>(&#123;<span class="hljs-string">&quot;src_airport&quot;</span>:&#123;<span class="hljs-string">&quot;<span class="hljs-variable">$not</span>&quot;</span>:&#123;<span class="hljs-string">&quot;<span class="hljs-variable">$eq</span>&quot;</span>:<span class="hljs-string">&quot;ASF&quot;</span>&#125;&#125;&#125;)<br></code></pre></td></tr></table></figure><h3 id="特殊"><a href="#特殊" class="headerlink" title="特殊"></a>特殊</h3><p>想表示多个相同逻辑符的表达式的and的时候</p><p>必须使用<code>$and</code>逻辑符，而不能用逗号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">db.routes.find(&#123; <span class="hljs-string">&quot;$and&quot;</span>: [ &#123; <span class="hljs-string">&quot;$or&quot;</span> :[ &#123; <span class="hljs-string">&quot;dst_airport&quot;</span>: <span class="hljs-string">&quot;KZN&quot;</span> &#125;,<br>                                    &#123; <span class="hljs-string">&quot;src_airport&quot;</span>: <span class="hljs-string">&quot;KZN&quot;</span> &#125;<br>                                  ] &#125;,<br>                          &#123; <span class="hljs-string">&quot;$or&quot;</span> :[ &#123; <span class="hljs-string">&quot;airplane&quot;</span>: <span class="hljs-string">&quot;CR2&quot;</span> &#125;,<br>                                     &#123; <span class="hljs-string">&quot;airplane&quot;</span>: <span class="hljs-string">&quot;A81&quot;</span> &#125; ] &#125;<br>                         ]&#125;).pretty()<br></code></pre></td></tr></table></figure><h2 id="查询表达式符"><a href="#查询表达式符" class="headerlink" title="查询表达式符"></a>查询表达式符</h2><p><code>$col</code> 的意思是取值</p><p>查询表达符中的比较符的使用发生了变化，<strong>比较符在前，属性名称和值在后</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">db.trips.<span class="hljs-built_in">find</span>(&#123; <span class="hljs-string">&quot;<span class="hljs-variable">$expr</span>&quot;</span>: &#123; <span class="hljs-string">&quot;<span class="hljs-variable">$and</span>&quot;</span>: [ &#123; <span class="hljs-string">&quot;<span class="hljs-variable">$gt</span>&quot;</span>: [ <span class="hljs-string">&quot;<span class="hljs-variable">$tripduration</span>&quot;</span>, 1200 ]&#125;,<br>                         &#123; <span class="hljs-string">&quot;<span class="hljs-variable">$eq</span>&quot;</span>: [ <span class="hljs-string">&quot;<span class="hljs-variable">$end</span> station id&quot;</span>, <span class="hljs-string">&quot;<span class="hljs-variable">$start</span> station id&quot;</span> ]&#125;<br>                       ]&#125;&#125;).count()<br></code></pre></td></tr></table></figure><h2 id="数组相关"><a href="#数组相关" class="headerlink" title="数组相关"></a>数组相关</h2><h3 id="push"><a href="#push" class="headerlink" title="$push"></a>$push</h3><p>先前的update中的$push来实现为文档添加元素，或者将属性从单值转为多值，或向数组中添加元素</p><hr><p>我们设定有个文档的amenities的值为[“a”,”b”,”c”]</p><h3 id="单个匹配查询"><a href="#单个匹配查询" class="headerlink" title="单个匹配查询"></a>单个匹配查询</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript">find<span class="hljs-function"><span class="hljs-params">(&#123;<span class="hljs-string">&quot;amenities&quot;</span>:<span class="hljs-string">&quot;a&quot;</span>&#125;)</span> --&gt;</span> 能查询到<br></code></pre></td></tr></table></figure><h3 id="精确内容和顺序匹配"><a href="#精确内容和顺序匹配" class="headerlink" title="精确内容和顺序匹配"></a>精确内容和顺序匹配</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">find</span><span class="hljs-params">(&#123;<span class="hljs-string">&quot;amenities&quot;</span>:[<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>]&#125;)</span></span> ---&gt;能查询到<br><span class="hljs-function"><span class="hljs-title">find</span><span class="hljs-params">(&#123;<span class="hljs-string">&quot;amenities&quot;</span>:[<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>]&#125;)</span></span> ---&gt;不能查询到<br></code></pre></td></tr></table></figure><h3 id="内容匹配"><a href="#内容匹配" class="headerlink" title="内容匹配"></a>内容匹配</h3><p>即文档中的amenities数组必须包含a,b,c即可</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span>(&#123;<span class="hljs-string">&quot;amenities&quot;</span>:&#123;<span class="hljs-string">&quot;<span class="hljs-variable">$all</span>&quot;</span>:[<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>]&#125;&#125;)<br></code></pre></td></tr></table></figure><h3 id="长度匹配"><a href="#长度匹配" class="headerlink" title="长度匹配"></a>长度匹配</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;amenities&quot;</span>:&#123;<span class="hljs-string">&quot;<span class="hljs-variable">$size</span>&quot;</span>:12,<span class="hljs-string">&quot;<span class="hljs-variable">$all</span>&quot;</span>:[<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>]&#125;)<br></code></pre></td></tr></table></figure><h2 id="查询内容限定"><a href="#查询内容限定" class="headerlink" title="查询内容限定"></a>查询内容限定</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">db.<span class="hljs-symbol">&lt;collection&gt;</span>.<span class="hljs-keyword">find</span>(&#123;<span class="hljs-symbol">&lt;query&gt;</span>,<span class="hljs-symbol">&lt;projection&gt;</span>)<br></code></pre></td></tr></table></figure><p>1表示展示，0表示隐藏，但两者不能混合着用</p><p>特殊的是<code>_id:0，other:1</code>是允许的</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">db<span class="hljs-selector-class">.listingsAndReviews</span><span class="hljs-selector-class">.find</span>(&#123; <span class="hljs-string">&quot;amenities&quot;</span>: <span class="hljs-string">&quot;Wifi&quot;</span> &#125;,<br>                           &#123; <span class="hljs-string">&quot;price&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;address&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-number">0</span> &#125;)<span class="hljs-selector-class">.pretty</span>()<br></code></pre></td></tr></table></figure><h2 id="查询子文档-elemMatch"><a href="#查询子文档-elemMatch" class="headerlink" title="查询子文档$elemMatch"></a>查询子文档<code>$elemMatch</code></h2><p>可能有多个子文档，此时只要有一个满足即匹配</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">db.grades.<span class="hljs-built_in">find</span>(&#123;<span class="hljs-string">&quot;class_id&quot;</span>:431&#125;,<br>&#123;<span class="hljs-string">&quot;scores&quot;</span>:&#123;<span class="hljs-string">&quot;<span class="hljs-variable">$elemMatch</span>&quot;</span>:&#123;<span class="hljs-string">&quot;score&quot;</span>:&#123;<span class="hljs-string">&quot;<span class="hljs-variable">$gt</span>&quot;</span>:55&#125;&#125;&#125;&#125;)<br></code></pre></td></tr></table></figure><h2 id="定位子文档内容"><a href="#定位子文档内容" class="headerlink" title="定位子文档内容"></a>定位子文档内容</h2><p>通过field1.field2…来获取子文档field1的field2内容</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">db<span class="hljs-selector-class">.trips</span><span class="hljs-selector-class">.findOne</span>(&#123; <span class="hljs-string">&quot;start station location.type&quot;</span>: <span class="hljs-string">&quot;Point&quot;</span> &#125;)<br></code></pre></td></tr></table></figure><h2 id="定位数组元素"><a href="#定位数组元素" class="headerlink" title="定位数组元素"></a>定位数组元素</h2><p>通过array.0.field…来获取数组元素内容</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">db<span class="hljs-selector-class">.companies</span><span class="hljs-selector-class">.find</span>(&#123; <span class="hljs-string">&quot;relationships.0.person.first_name&quot;</span>: <span class="hljs-string">&quot;Mark&quot;</span>&#125;,&#123; <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-number">1</span> &#125;)<span class="hljs-selector-class">.count</span>()<br></code></pre></td></tr></table></figure><h1 id="C5-Indexing-and-Aggregation-Pipeline"><a href="#C5-Indexing-and-Aggregation-Pipeline" class="headerlink" title="C5.Indexing and Aggregation Pipeline"></a>C5.Indexing and Aggregation Pipeline</h1><h2 id="Aggregation-Framework"><a href="#Aggregation-Framework" class="headerlink" title="Aggregation Framework"></a>Aggregation Framework</h2><blockquote><p>Mongo的聚合框架类似与Java8的stream API  通过该框架构建自己的数据处理的流水线</p></blockquote><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">db.<span class="hljs-tag">&lt;<span class="hljs-name">collection</span>&gt;</span>.aggregate()<br></code></pre></td></tr></table></figure><h3 id="数据处理符"><a href="#数据处理符" class="headerlink" title="数据处理符"></a>数据处理符</h3><h4 id="match"><a href="#match" class="headerlink" title="$match"></a>$match</h4><p>内容匹配处理</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">db<span class="hljs-selector-class">.collection</span><span class="hljs-selector-class">.aggregate</span>(&#123;<span class="hljs-string">&quot;$match&quot;</span>:&#123;<span class="hljs-string">&quot;field&quot;</span>:<span class="hljs-string">&quot;value&quot;</span>&#125;&#125;)<br></code></pre></td></tr></table></figure><h4 id="project"><a href="#project" class="headerlink" title="$project"></a>$project</h4><p>数据映像，跟find中的数据映像类似</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">db</span>.collection.aggregate(&#123;<span class="hljs-string">&quot;$project&quot;</span>:&#123;<span class="hljs-string">&quot;field&quot;</span>:<span class="hljs-number">1</span>/<span class="hljs-number">0</span>&#125;&#125;)<br></code></pre></td></tr></table></figure><h4 id="group"><a href="#group" class="headerlink" title="$group"></a>$group</h4><p>汇聚数据</p><ul><li>_id:组合数据的字段</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.collection.aggregate([&#123;<span class="hljs-string">&quot;<span class="hljs-variable">$group</span>&quot;</span>:&#123;<span class="hljs-string">&quot;_id&quot;</span>:<span class="hljs-string">&quot;<span class="hljs-variable">$field</span>&quot;</span>,<br>   <span class="hljs-string">&quot;count&quot;</span>:&#123;<span class="hljs-string">&quot;<span class="hljs-variable">$sum</span>&quot;</span>,1&#125;&#125;&#125;])<br></code></pre></td></tr></table></figure><h4 id="多处理"><a href="#多处理" class="headerlink" title="多处理"></a>多处理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">db.collection.aggregate([&#123;<span class="hljs-string">&quot;<span class="hljs-variable">$match</span>&quot;</span>:&#123;&#125;&#125;,<br> &#123;<span class="hljs-string">&quot;<span class="hljs-variable">$project</span>&quot;</span>:&#123;&#125;&#125;<br>    &#125;])<br></code></pre></td></tr></table></figure><h2 id="sort-amp-limit"><a href="#sort-amp-limit" class="headerlink" title="sort &amp; limit"></a>sort &amp; limit</h2><p>sort可以用多字段排序，而1代表顺序，-1代表逆序</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">db</span>.&lt;collection&gt;.<span class="hljs-keyword">sort</span>(&#123;<span class="hljs-string">&quot;field1&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;field2&quot;</span>:<span class="hljs-string">&quot;-1&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf">db.<span class="hljs-variable">&lt;collection&gt;</span>.<span class="hljs-keyword">limit</span>()<br></code></pre></td></tr></table></figure><p><strong>对于sort和limit的使用，无论sort和limit的调用顺序如何都是先sort再limit</strong></p><p><strong>值得注意的是，null会在升序排序的最前</strong></p><h2 id="indexes"><a href="#indexes" class="headerlink" title="indexes"></a>indexes</h2><p>索引这块的机制和Mysql的类似，也有覆盖索引的机制</p><h3 id="单一索引"><a href="#单一索引" class="headerlink" title="单一索引"></a>单一索引</h3><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">db.trips.<span class="hljs-keyword">create</span><span class="hljs-meta">Index</span>(&#123; <span class="hljs-string">&quot;birth year&quot;</span>: 1 &#125;) <br></code></pre></td></tr></table></figure><h3 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">db</span>.trips.createIndex(&#123; <span class="hljs-string">&quot;start station id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;birth year&quot;</span>: <span class="hljs-number">1</span> &#125;)<br></code></pre></td></tr></table></figure><h2 id="upsert"><a href="#upsert" class="headerlink" title="upsert"></a>upsert</h2><p>常见的场景是某属性内容存在即更新，不存在则插入</p><p>mongo中的upsert即是，当query返回结果为空时，进行插入</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">db.iot.update<span class="hljs-constructor">One(&lt;<span class="hljs-params">query</span>&gt;,&lt;<span class="hljs-params">update</span>&gt;,&#123;<span class="hljs-string">&quot;upsert&quot;</span>: <span class="hljs-params">true</span> &#125;)</span><br></code></pre></td></tr></table></figure><h3 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">db<span class="hljs-selector-class">.iot</span><span class="hljs-selector-class">.updateOne</span>(&#123; <span class="hljs-string">&quot;sensor&quot;</span>: r<span class="hljs-selector-class">.sensor</span>, <span class="hljs-string">&quot;date&quot;</span>: r<span class="hljs-selector-class">.date</span>,<br>                   <span class="hljs-string">&quot;valcount&quot;</span>: &#123; <span class="hljs-string">&quot;$lt&quot;</span>: <span class="hljs-number">48</span> &#125; &#125;,<br>                         &#123; <span class="hljs-string">&quot;$push&quot;</span>: &#123; <span class="hljs-string">&quot;readings&quot;</span>: &#123; <span class="hljs-string">&quot;v&quot;</span>: r<span class="hljs-selector-class">.value</span>, <span class="hljs-string">&quot;t&quot;</span>: r<span class="hljs-selector-class">.time</span> &#125; &#125;,<br>                        <span class="hljs-string">&quot;$inc&quot;</span>: &#123; <span class="hljs-string">&quot;valcount&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;total&quot;</span>: r<span class="hljs-selector-class">.value</span> &#125; &#125;,<br>                 &#123; <span class="hljs-string">&quot;upsert&quot;</span>: true &#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mongodb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>db</tag>
      
      <tag>learn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MIT6.824 lab1的收获和分享</title>
    <link href="/2022/04/11/7_lab%20share/MIT-6-824-lab1/"/>
    <url>/2022/04/11/7_lab%20share/MIT-6-824-lab1/</url>
    
    <content type="html"><![CDATA[<h1 id="基本过程"><a href="#基本过程" class="headerlink" title="基本过程"></a>基本过程</h1><ul><li>coordinator：mapping-&gt;reduceing-&gt;finish，主要是分发任务，任务确认，任务过期处理</li><li>worker：map生成intermediate file，reduce将intermediate file转化为output文件</li><li>通过本地文件系统代替GFS实现</li></ul><h1 id="难点和卡住的地方"><a href="#难点和卡住的地方" class="headerlink" title="难点和卡住的地方"></a>难点和卡住的地方</h1><ol><li>初入GO语言开发，很多API都不是很熟悉，特别是文件相关的API<ul><li>找文件：filePath.Glob是最佳的</li><li>创建删除打开删除文件：os.xxx</li><li>切片删除: <code>a  = a[:len-1]</code></li><li>时间API的使用<ul><li>Add()方法是会改变原来的时间的，而不是生成一个新的时间</li><li>比对时间最好是用Sub()</li></ul></li><li>RPC的使用，<strong>传出传入的参数的首字母必须大写</strong></li><li>go中的日志不是很清楚，只是简单用fmt打日志</li></ul></li><li>环境的搭建，起初想windows连接linux开发，发现太慢太累赘了，然后去虚拟机下了goland和git完成</li><li>coordinator的数据结构设计的不是很好，进行了一次大重构（Map和Reduce两对队列转换为一对队列）</li><li>worker的Reduce过程中的文件处理：<strong>必须在最后生成out put文件再删除中间文件</strong></li><li>设计通过task-id来找寻中间文件，而不是通过收集文件名（我觉得合理，如果是复杂环境，就多加一个uuid即可）</li><li>初始时对race的提示不敏感，有信息都不去解决</li></ol><h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><ul><li><p>Small batch</p><ul><li>一个大功能怎么拆分成多个可测的功能，特别是worker中map和reduce的分别测试</li></ul></li><li><p>逻辑根本没有经过设计，就进行上手</p><ul><li>TEST fails，But why？能从失败中获取什么？来反馈你的设计和重新编码是很有必要的</li></ul></li><li><p>做Lab不应是忙头苍蝇到处乱撞，也是需要考虑设计的</p></li></ul><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><ul><li><p>数据结构的定义</p><ul><li>你要做什么？怎么做？用到什么数据结构来实现？</li></ul></li><li><p>怎么打日志？怎么更好的打桩？清楚地知道当前的任务状况？</p><ul><li>一步一步的完成好各个子功能，后序大功能才能更好地应对</li></ul></li><li><p>要沉住气，稳住心态，Lab就是这么酸爽的</p></li></ul><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>希望大伙都能看到它的到来</p><p><img src="https://raw.githubusercontent.com/dada404/pictures/main/img/image-20220407233028421.png"></p>]]></content>
    
    
    <categories>
      
      <category>lab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Distribute_System Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to DevOps</title>
    <link href="/2022/04/06/6_DevOps/1-Introduction-to-DevOps/"/>
    <url>/2022/04/06/6_DevOps/1-Introduction-to-DevOps/</url>
    
    <content type="html"><![CDATA[<p><strong>内容以及图片摘录于</strong>：<a href="https://www.coursera.org/learn/intro-to-devops/">https://www.coursera.org/learn/intro-to-devops/</a></p><p>很喜欢课程中老师知识的讲述方式</p><h1 id="DevOps是什么"><a href="#DevOps是什么" class="headerlink" title="DevOps是什么"></a>DevOps是什么</h1><p><strong>其中culture是最重要的</strong>，但很多企业把精力倾向于对tools和methods选择和使用，而有些DevOps的工具供应商也对宣传工具的重要性以至于他们能很好的售卖他们的产品（我当初踩坑就是被工具选择和使用困住了）</p><p><img src="https://raw.githubusercontent.com/dada404/pictures/main/image-20220402170918593.png" alt="image-20220402170918593"></p><h1 id="DevOps能带来什么"><a href="#DevOps能带来什么" class="headerlink" title="DevOps能带来什么"></a>DevOps能带来什么</h1><ul><li>fail fast and roll back quickly（失败时能快速回滚）</li><li>test in-market instead of analyzing（在真正的生产环境中A/B测试）</li><li>application  design allowed individual components to be replaced（某个服务挂了不影响其他服务的使用）</li></ul><h1 id="对DevOps的偏见"><a href="#对DevOps的偏见" class="headerlink" title="对DevOps的偏见"></a>对DevOps的偏见</h1><ul><li>DevOps不是简单的Dev+Ops</li><li>不是单独的一个团队</li><li>不是简单工具的使用</li><li>并不是处处适用的</li><li>不只是自动化（测试打包部署等）</li></ul><h1 id="DevOps的目标是什么"><a href="#DevOps的目标是什么" class="headerlink" title="DevOps的目标是什么"></a>DevOps的目标是什么</h1><p><strong>Agility is goal.</strong></p><ul><li>Smart experimentation </li><li>Moving in market </li><li>With maximum velocity and minimum risk</li><li>Gaining quick, valuable insights</li></ul><h1 id="敏捷性的三大要素"><a href="#敏捷性的三大要素" class="headerlink" title="敏捷性的三大要素"></a>敏捷性的三大要素</h1><ul><li><p>交付层面：DevOps</p><ul><li>cultural change</li><li>automated pipelines</li><li>infrastructure as code</li><li>immutable infrastructure</li><li>cloud native application design</li><li>the ecosystem of containers</li><li>how to deploy with immutable infrastructure.</li></ul></li><li><p>架构层面：微服务</p></li><li><p>基础设施：容器</p></li></ul><p><img src="https://raw.githubusercontent.com/dada404/pictures/main/image-20220402170432582.png" alt="image-20220402170432582"></p><h1 id="如何改变团队文化为DevOps-culture"><a href="#如何改变团队文化为DevOps-culture" class="headerlink" title="如何改变团队文化为DevOps culture"></a>如何改变团队文化为DevOps culture</h1><ul><li><p>Think differently</p><ul><li>Socail coding（git and public repository）</li><li>Working in small batches(microservice)</li><li>Minimum Viable Product(microservice)</li></ul></li><li><p>Work differently</p><ul><li>TDD（Test Driven Developmemt）or BDD（Behavior Driven Developmemt）</li><li>CI / CD</li></ul></li><li><p>Organize differently</p><ul><li>Organization impacts design：组织方式的变化导致产品的架构和设计的变化</li></ul></li><li><p>Measure differently</p><blockquote><p>How changing your measurement system to encourage the correct behavior is critical for your success because <strong>you get what you measure.</strong></p></blockquote><p>度量工作的方式需要发生改变</p></li></ul><h2 id="需要什么"><a href="#需要什么" class="headerlink" title="需要什么"></a>需要什么</h2><p>文化的改变是极度困难的，它要求他们成员的遗忘掉之前的思想来完成</p><ul><li>trust</li><li>transparency</li><li>discipline</li></ul><h1 id="往前的模型"><a href="#往前的模型" class="headerlink" title="往前的模型"></a>往前的模型</h1><h2 id="瀑布模型-Waterfall"><a href="#瀑布模型-Waterfall" class="headerlink" title="瀑布模型(Waterfall)"></a>瀑布模型(Waterfall)</h2><p>有着明显的缺点</p><ul><li>各个阶段之间阻塞</li><li>阶段性的回退带来巨大消耗</li><li>没有中间的产品和评估，引出了极大的风险</li></ul><p><img src="https://raw.githubusercontent.com/dada404/pictures/main/Snipaste_2022-04-04_11-00-04.png" alt="Snipaste_2022-04-04_11-00-04"></p><h2 id="极限编程-XP"><a href="#极限编程-XP" class="headerlink" title="极限编程(XP)"></a>极限编程(XP)</h2><p><img src="https://raw.githubusercontent.com/dada404/pictures/main/Snipaste_2022-04-04_11-20-01.png" alt="Snipaste_2022-04-04_11-20-01"></p><h2 id="敏捷开发-Agile"><a href="#敏捷开发-Agile" class="headerlink" title="敏捷开发(Agile)"></a>敏捷开发(Agile)</h2><h3 id="敏捷的理论"><a href="#敏捷的理论" class="headerlink" title="敏捷的理论"></a>敏捷的理论</h3><ul><li><strong>Individuals and interactions</strong> over processes and tools</li><li><strong>Working software</strong> over comprehensive documentation</li><li><strong>Customer collaboration</strong> over contract negotiation</li><li><strong>Responding to change</strong> over following a plan</li></ul><p>敏捷开发的体现是它会出现大量的中间产品予以测试发布等，通过这个中间产品得以获取尽可能早的反馈，再进行重新编码等</p><h3 id="敏捷的不足"><a href="#敏捷的不足" class="headerlink" title="敏捷的不足"></a>敏捷的不足</h3><p>敏捷开发中在严格管制的企业中即使Dev产生了中间的产品，也要等待确认Ops的部署实施</p><p><img src="https://github.com/dada404/pictures/blob/main/Snipaste_2022-04-04_11-30-54.png?raw=true" alt="Snipaste_2022-04-04_11-30-54"></p><h3 id="引出了Shadow-IT"><a href="#引出了Shadow-IT" class="headerlink" title="引出了Shadow IT"></a>引出了Shadow IT</h3><p>正是因为上述的问题，引出了影子IT，其内容组织中的系统是由组织内部建立并且使用，<strong>但没有正式的组织核可</strong>，而系统是<strong>由IT部门以外的部门订定规格并且布署</strong>。<a href="https://zh.wikipedia.org/wiki/%E5%BD%B1%E5%AD%90IT">^ 1</a></p><p><a href="https://cloud.tencent.com/developer/article/1170722">https://cloud.tencent.com/developer/article/1170722</a></p><h1 id="DevOps一些好的内容"><a href="#DevOps一些好的内容" class="headerlink" title="DevOps一些好的内容"></a>DevOps一些好的内容</h1><ul><li><a href="https://devopsdays.org/">DevOpsday</a></li><li><em>Continous Delivery《持续交付》</em></li><li><em>The Phoenix Project 《凤凰项目》</em></li><li><a href="https://www.devops-research.com/research.html#reports">State of DevOps Reports</a></li><li><em><strong>The DevOps Handbook《DevOps实践指南》</strong></em></li></ul>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ping github.com时dns解析失败的问题</title>
    <link href="/2022/03/20/%E9%94%99%E8%AF%AFbug/ping-github-com%E6%97%B6dns%E8%A7%A3%E6%9E%90%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/03/20/%E9%94%99%E8%AF%AFbug/ping-github-com%E6%97%B6dns%E8%A7%A3%E6%9E%90%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>先在<a href="https://ipaddress.com/website">https://ipaddress.com/website</a> 获取</p><ul><li>GitHub.com</li><li>github.global.ssl.Fastly.net</li></ul><p>两个域名的对应IP地址</p><p>在<code>C:\Windows\System32\drivers\etc</code>加入上述解析结果</p>]]></content>
    
    
    
    <tags>
      
      <tag>tool-bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
