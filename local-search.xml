<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MIT6.824 lab1的收获和分享</title>
    <link href="/2022/04/11/7_lab%20share/MIT-6-824-lab1/"/>
    <url>/2022/04/11/7_lab%20share/MIT-6-824-lab1/</url>
    
    <content type="html"><![CDATA[<h1 id="基本过程"><a href="#基本过程" class="headerlink" title="基本过程"></a>基本过程</h1><ul><li>coordinator：mapping-&gt;reduceing-&gt;finish，主要是分发任务，任务确认，任务过期处理</li><li>worker：map生成intermediate file，reduce将intermediate file转化为output文件</li><li>通过本地文件系统代替GFS实现</li></ul><h1 id="难点和卡住的地方"><a href="#难点和卡住的地方" class="headerlink" title="难点和卡住的地方"></a>难点和卡住的地方</h1><ol><li>初入GO语言开发，很多API都不是很熟悉，特别是文件相关的API<ul><li>找文件：filePath.Glob是最佳的</li><li>创建删除打开删除文件：os.xxx</li><li>切片删除: <code>a  = a[:len-1]</code></li><li>时间API的使用<ul><li>Add()方法是会改变原来的时间的，而不是生成一个新的时间</li><li>比对时间最好是用Sub()</li></ul></li><li>RPC的使用，<strong>传出传入的参数的首字母必须大写</strong></li><li>go中的日志不是很清楚，只是简单用fmt打日志</li></ul></li><li>环境的搭建，起初想windows连接linux开发，发现太慢太累赘了，然后去虚拟机下了goland和git完成</li><li>coordinator的数据结构设计的不是很好，进行了一次大重构（Map和Reduce两对队列转换为一对队列）</li><li>worker的Reduce过程中的文件处理：<strong>必须在最后生成out put文件再删除中间文件</strong></li><li>设计通过task-id来找寻中间文件，而不是通过收集文件名（我觉得合理，如果是复杂环境，就多加一个uuid即可）</li><li>初始时对race的提示不敏感，有信息都不去解决</li></ol><h1 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h1><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><ul><li><p>Small batch</p><ul><li>一个大功能怎么拆分成多个可测的功能，特别是worker中map和reduce的分别测试</li></ul></li><li><p>逻辑根本没有经过设计，就进行上手</p><ul><li>TEST fails，But why？能从失败中获取什么？来反馈你的设计和重新编码是很有必要的</li></ul></li><li><p>做Lab不应是忙头苍蝇到处乱撞，也是需要考虑设计的</p></li></ul><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><ul><li><p>数据结构的定义</p><ul><li>你要做什么？怎么做？用到什么数据结构来实现？</li></ul></li><li><p>怎么打日志？怎么更好的打桩？清楚地知道当前的任务状况？</p><ul><li>一步一步的完成好各个子功能，后序大功能才能更好地应对</li></ul></li><li><p>要沉住气，稳住心态，Lab就是这么酸爽的</p></li></ul><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>希望大伙都能看到它的到来</p><p><img src="https://raw.githubusercontent.com/dada404/pictures/main/img/image-20220407233028421.png"></p>]]></content>
    
    
    <categories>
      
      <category>lab</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Distribute_System Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to DevOps</title>
    <link href="/2022/04/06/6_DevOps/1-Introduction-to-DevOps/"/>
    <url>/2022/04/06/6_DevOps/1-Introduction-to-DevOps/</url>
    
    <content type="html"><![CDATA[<p><strong>内容以及图片摘录于</strong>：<a href="https://www.coursera.org/learn/intro-to-devops/">https://www.coursera.org/learn/intro-to-devops/</a></p><p>很喜欢课程中老师知识的讲述方式</p><h1 id="DevOps是什么"><a href="#DevOps是什么" class="headerlink" title="DevOps是什么"></a>DevOps是什么</h1><p><strong>其中culture是最重要的</strong>，但很多企业把精力倾向于对tools和methods选择和使用，而有些DevOps的工具供应商也对宣传工具的重要性以至于他们能很好的售卖他们的产品（我当初踩坑就是被工具选择和使用困住了）</p><p><img src="https://raw.githubusercontent.com/dada404/pictures/main/image-20220402170918593.png" alt="image-20220402170918593"></p><h1 id="DevOps能带来什么"><a href="#DevOps能带来什么" class="headerlink" title="DevOps能带来什么"></a>DevOps能带来什么</h1><ul><li>fail fast and roll back quickly（失败时能快速回滚）</li><li>test in-market instead of analyzing（在真正的生产环境中A/B测试）</li><li>application  design allowed individual components to be replaced（某个服务挂了不影响其他服务的使用）</li></ul><h1 id="对DevOps的偏见"><a href="#对DevOps的偏见" class="headerlink" title="对DevOps的偏见"></a>对DevOps的偏见</h1><ul><li>DevOps不是简单的Dev+Ops</li><li>不是单独的一个团队</li><li>不是简单工具的使用</li><li>并不是处处适用的</li><li>不只是自动化（测试打包部署等）</li></ul><h1 id="DevOps的目标是什么"><a href="#DevOps的目标是什么" class="headerlink" title="DevOps的目标是什么"></a>DevOps的目标是什么</h1><p><strong>Agility is goal.</strong></p><ul><li>Smart experimentation </li><li>Moving in market </li><li>With maximum velocity and minimum risk</li><li>Gaining quick, valuable insights</li></ul><h1 id="敏捷性的三大要素"><a href="#敏捷性的三大要素" class="headerlink" title="敏捷性的三大要素"></a>敏捷性的三大要素</h1><ul><li><p>交付层面：DevOps</p><ul><li>cultural change</li><li>automated pipelines</li><li>infrastructure as code</li><li>immutable infrastructure</li><li>cloud native application design</li><li>the ecosystem of containers</li><li>how to deploy with immutable infrastructure.</li></ul></li><li><p>架构层面：微服务</p></li><li><p>基础设施：容器</p></li></ul><p><img src="https://raw.githubusercontent.com/dada404/pictures/main/image-20220402170432582.png" alt="image-20220402170432582"></p><h1 id="如何改变团队文化为DevOps-culture"><a href="#如何改变团队文化为DevOps-culture" class="headerlink" title="如何改变团队文化为DevOps culture"></a>如何改变团队文化为DevOps culture</h1><ul><li><p>Think differently</p><ul><li>Socail coding（git and public repository）</li><li>Working in small batches(microservice)</li><li>Minimum Viable Product(microservice)</li></ul></li><li><p>Work differently</p><ul><li>TDD（Test Driven Developmemt）or BDD（Behavior Driven Developmemt）</li><li>CI / CD</li></ul></li><li><p>Organize differently</p><ul><li>Organization impacts design：组织方式的变化导致产品的架构和设计的变化</li></ul></li><li><p>Measure differently</p><blockquote><p>How changing your measurement system to encourage the correct behavior is critical for your success because <strong>you get what you measure.</strong></p></blockquote><p>度量工作的方式需要发生改变</p></li></ul><h2 id="需要什么"><a href="#需要什么" class="headerlink" title="需要什么"></a>需要什么</h2><p>文化的改变是极度困难的，它要求他们成员的遗忘掉之前的思想来完成</p><ul><li>trust</li><li>transparency</li><li>discipline</li></ul><h1 id="往前的模型"><a href="#往前的模型" class="headerlink" title="往前的模型"></a>往前的模型</h1><h2 id="瀑布模型-Waterfall"><a href="#瀑布模型-Waterfall" class="headerlink" title="瀑布模型(Waterfall)"></a>瀑布模型(Waterfall)</h2><p>有着明显的缺点</p><ul><li>各个阶段之间阻塞</li><li>阶段性的回退带来巨大消耗</li><li>没有中间的产品和评估，引出了极大的风险</li></ul><p><img src="https://raw.githubusercontent.com/dada404/pictures/main/Snipaste_2022-04-04_11-00-04.png" alt="Snipaste_2022-04-04_11-00-04"></p><h2 id="极限编程-XP"><a href="#极限编程-XP" class="headerlink" title="极限编程(XP)"></a>极限编程(XP)</h2><p><img src="https://raw.githubusercontent.com/dada404/pictures/main/Snipaste_2022-04-04_11-20-01.png" alt="Snipaste_2022-04-04_11-20-01"></p><h2 id="敏捷开发-Agile"><a href="#敏捷开发-Agile" class="headerlink" title="敏捷开发(Agile)"></a>敏捷开发(Agile)</h2><h3 id="敏捷的理论"><a href="#敏捷的理论" class="headerlink" title="敏捷的理论"></a>敏捷的理论</h3><ul><li><strong>Individuals and interactions</strong> over processes and tools</li><li><strong>Working software</strong> over comprehensive documentation</li><li><strong>Customer collaboration</strong> over contract negotiation</li><li><strong>Responding to change</strong> over following a plan</li></ul><p>敏捷开发的体现是它会出现大量的中间产品予以测试发布等，通过这个中间产品得以获取尽可能早的反馈，再进行重新编码等</p><h3 id="敏捷的不足"><a href="#敏捷的不足" class="headerlink" title="敏捷的不足"></a>敏捷的不足</h3><p>敏捷开发中在严格管制的企业中即使Dev产生了中间的产品，也要等待确认Ops的部署实施</p><p><img src="https://github.com/dada404/pictures/blob/main/Snipaste_2022-04-04_11-30-54.png?raw=true" alt="Snipaste_2022-04-04_11-30-54"></p><h3 id="引出了Shadow-IT"><a href="#引出了Shadow-IT" class="headerlink" title="引出了Shadow IT"></a>引出了Shadow IT</h3><p>正是因为上述的问题，引出了影子IT，其内容组织中的系统是由组织内部建立并且使用，<strong>但没有正式的组织核可</strong>，而系统是<strong>由IT部门以外的部门订定规格并且布署</strong>。<a href="https://zh.wikipedia.org/wiki/%E5%BD%B1%E5%AD%90IT">^ 1</a></p><p><a href="https://cloud.tencent.com/developer/article/1170722">https://cloud.tencent.com/developer/article/1170722</a></p><h1 id="DevOps一些好的内容"><a href="#DevOps一些好的内容" class="headerlink" title="DevOps一些好的内容"></a>DevOps一些好的内容</h1><ul><li><a href="https://devopsdays.org/">DevOpsday</a></li><li><em>Continous Delivery《持续交付》</em></li><li><em>The Phoenix Project 《凤凰项目》</em></li><li><a href="https://www.devops-research.com/research.html#reports">State of DevOps Reports</a></li><li><em><strong>The DevOps Handbook《DevOps实践指南》</strong></em></li></ul>]]></content>
    
    
    <categories>
      
      <category>DevOps</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ping github.com时dns解析失败的问题</title>
    <link href="/2022/03/20/%E9%94%99%E8%AF%AFbug/ping-github-com%E6%97%B6dns%E8%A7%A3%E6%9E%90%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/03/20/%E9%94%99%E8%AF%AFbug/ping-github-com%E6%97%B6dns%E8%A7%A3%E6%9E%90%E5%A4%B1%E8%B4%A5%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>先在<a href="https://ipaddress.com/website">https://ipaddress.com/website</a> 获取</p><ul><li>GitHub.com</li><li>github.global.ssl.Fastly.net</li></ul><p>两个域名的对应IP地址</p><p>在<code>C:\Windows\System32\drivers\etc</code>加入上述解析结果</p>]]></content>
    
    
    
    <tags>
      
      <tag>tool-bug</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
